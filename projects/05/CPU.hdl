// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    Or(a=instruction[15],
       b=false,
       out=cinstruction);
    Not(in=cinstruction,
        out=ainstruction);

    And(a=cinstruction,
        b=instruction[5],
        out=writeA);

    And(a=cinstruction,
        b=writeA,
        out=ALUtoAregister);
    Mux16(a=instruction,
          b=ALUout,
          sel=ALUtoAregister,
          out=Aregisterin);

    Or(a=ainstruction,
       b=ALUtoAregister,
       out=loadA);
    Register(in=Aregisterin,
             load=loadA,
             out=Aregisterout);
    Or16(a=Aregisterout,
         b=false,
         out[0..14]=addressM);

    Mux16(a=Aregisterout,
          b=inM,
          sel=instruction[12],
          out=AorMout);

    And(a=cinstruction,
        b=instruction[4],
        out=writeD);

    Register(in=ALUout,
             load=writeD,
             out=dregisterout);
    ALU(x=dregisterout,
        y=AorMout,  // 16-bit inputs
        zx=instruction[11], // zero the x input?
        nx=instruction[10], // negate the x input?
        zy=instruction[9], // zero the y input?
        ny=instruction[8], // negate the y input?
        f=instruction[7],  // compute out = x + y (if 1) or x & y (if 0)
        no=instruction[6], // negate the out output?
        out=ALUout,
        zr=zrout, // 1 if (out == 0), 0 otherwise
        ng=ngout // 1 if (out < 0),  0 otherwise
    );
    Or16(a=ALUout,
         b=false,
         out=outM);

    And(a=zrout,
        b=instruction[1],
        out=jeq);
    And(a=ngout,
        b=instruction[2],
        out=jlt);
    Or(a=zrout,
       b=ngout,
       out=notpos);
    Not(in=notpos,
        out=posout);
    And(a=posout,
        b=instruction[0],
        out=jgt);
    Or(a=jeq,
       b=jlt,
       out=jle);
    Or(a=jle,
       b=jgt,
       out=jmp);
    And(a=jmp,
        b=cinstruction,
        out=loadPC);
    Not(in=loadPC,
        out=inc);

    PC(in=Aregisterout,
       load=loadPC,
       inc=inc,
       reset=reset,
       out[0..14]=pc);

    And(a=cinstruction,
        b=instruction[3],
        out=writeM);
}
